# -*- coding: utf-8 -*-
Automatically generated by Colaboratory.

# Commented out IPython magic to ensure Python compatibility.
# Importar las librerias

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import style
import datetime
import numpy as np
import seaborn as sns
# %matplotlib inline

# Asignar una variale (url por ejemplo) a la que se asigna la ruta donde se encuentra la base de datos - Google Sheets
url= 'http://bit.ly/3XjEqYT'

# Asignar nombre a la base de datos que va a guadrar la información (bd por ejemplo)
bd= pd.read_csv(url, encoding= 'unicode_escape', header=10)

# Mostrar la información de la base de datos llamando la variable
bd

# Se pueden asignar nuevos valores a lon nombres de las columnas que componen la base de datos
bd.columns =['Fecha','T_Objetivo','TIIE_28', 'T_Promedio_CH', 'INPC']

# Observamos el resultado
bd

#Limpieza de la Base de datos:
# Eliminar la fila 0
bd = bd.drop(bd.index[[0,1]])

type(bd)
# La base de datos corresponde a un DataFrame

bd.info()
# Se obtiene información de la Base de Datos

bd.Fecha = pd.to_datetime(bd.Fecha, dayfirst=True)
bd.set_index('Fecha', inplace = True)
#Se agina la columna "Fecha" como el índice la base de datos y se asigna formato de fecha

bd
# Se observa el resultado

Indicadores_Df = bd.copy()
#Para empezar a trabajar sobre la base de datos, se crea una copia y se agina un nuevo nombre a la base de datos

Indicadores_Df
#Se muestra el resultado de la nueva base de datos

Indicadores_Df = Indicadores_Df.drop(Indicadores_Df[Indicadores_Df['T_Objetivo']=="N/E"].index)
Indicadores_Df = Indicadores_Df.drop(Indicadores_Df[Indicadores_Df['TIIE_28']=="N/E"].index)
#Se eliminan los valores nulos, es ese caso los que contienen el valor "N/E"

Indicadores_Df

Indicadores_Df.info()

Indicadores_Df[['T_Objetivo']] = Indicadores_Df[['T_Objetivo']].astype('float')
Indicadores_Df[['T_Promedio_CH']] = Indicadores_Df[['T_Promedio_CH']].astype('float')
Indicadores_Df[['TIIE_28']] = Indicadores_Df[['TIIE_28']].astype('float')
# se cambia el tipo de dato de "object" a "float"

Indicadores_Df.describe()
#Se obtiene información de cada columna: promedo, desviación estándar, valor mínimo ..

plt.figure(figsize=(7,7), dpi=100)
sns.heatmap(Indicadores_Df.corr(),annot= True)
# Gráfica que muestra la correlación entre las columnas: Entre más cercano sea el valor a 1 más correlación existe

for column in Indicadores_Df:
  plt.figure()
  Indicadores_Df.boxplot([column])
  #Gráfica de cajas y bigotes de cada una de las columnas

t_max = Indicadores_Df['T_Objetivo'].max()
t_min = Indicadores_Df['T_Objetivo'].min()

print("Tasa de referencia máxima registrada: ", t_max,"%", "\nTasa referencia mínima registrada: ", t_min, "%")
#Se pueden obtener características de la información - Valores máximos y mínimos por columna

t_max_2 = Indicadores_Df['T_Promedio_CH'].max()
t_min_2 = Indicadores_Df['T_Promedio_CH'].min()

print("Tasa de referencia máxima registrada: ", t_max_2,"%", "\nTasa referencia mínima registrada: ", t_min_2, "%")

Indicadores_Df.loc['2008-01-21': '2023-07-24'].max()

max_TR = Indicadores_Df['T_Objetivo'].argmax()

max_TR

Indicadores_Df.iloc[max_TR]

max_TH = Indicadores_Df['T_Promedio_CH'].argmax()

Indicadores_Df.iloc[max_TH]

Indicadores_Df['Promedio']= np.mean(Indicadores_Df['T_Objetivo'])
#SE pueden crear nuevas columnas, que realicen cálculos sobre una columna específica de la base de datos

#Indicadores_Df.to_excel("tasas.xlsx") -> Se puede enviar la base de datos a un archivo excel
Indicadores_Df

style.use('ggplot')
plt.plot(Indicadores_Df['T_Objetivo'], color="b", linewidth= 1.5)
plt.plot(Indicadores_Df['T_Promedio_CH'], color="orange", linewidth= 1.5)
plt.plot(Indicadores_Df['TIIE_28'], color="red", linewidth= 1.5)
plt.title('Principales Indicadores - Mx.')
plt.ylabel('Tasa (%)')
plt.show()
# Gráfico para mostrar tres variables de la base de datos

style.use('ggplot')
plt.plot(Indicadores_Df['INPC'], color="b", linewidth= 1.5)
plt.title('INPC - Mx.')
plt.ylabel('Valor índice')
plt.show()
# o mostrar el resultado visual de una columna en específico

fig, ax=plt.subplots(figsize=(9,5))
style.use('ggplot')
Indicadores_Df['T_Objetivo'].plot(ax=ax, color='orange', linestyle= '-', linewidth='2.5')
Indicadores_Df['Promedio'].plot(ax=ax, color='red', linestyle= '--', linewidth= '1.5')
Indicadores_Df['T_Promedio_CH'].plot(ax=ax, color='blue', linestyle= '-', linewidth='2.5')
ax.set_title('Principales Indicadores - Mx.',fontsize= 16, color='blue')
ax.set_xlabel('Periodo', fontsize= 12, color='black')
ax.tick_params(labelsize='medium', width=3)
ax.set_ylabel('Tasa de interés (%)', fontsize= 12, color='black')
ax.legend(loc="upper right", fontsize=7)
#Mejorando la gráfica

fig, ax=plt.subplots(figsize=(9,5))
Indicadores_Df['T_Objetivo'].plot(ax=ax, color='orange', linestyle= '-', linewidth='1.5')
Indicadores_Df['INPC'].plot(ax=ax, color='red', linestyle= '--', linewidth= '1.5')
ax.set_title('Tasa objetivo de Banco de México | Inflación',fontsize= 16, color='blue')
ax.set_xlabel('Periodo', fontsize= 12, color='black')
ax.tick_params(labelsize='medium', width=3)
ax.set_ylabel('Tasa de interés (%)', fontsize= 12, color='black')
ax.legend(loc="upper right", fontsize=7)

Indicadores_copy = Indicadores_Df.copy()
#Se puede crar una nueva base de datos

Indicadores_copy= Indicadores_copy.drop(['Promedio'], axis=1)
#Se eliminan columnas que ya no sean necesarias

Indicadores_copy = (Indicadores_copy / Indicadores_copy.iloc[0])*100
#Se iguala el primer valor de la primer fila de todas las columnas a 100 para poder compararlas

Indicadores_copy

fig1, ax=plt.subplots(figsize=(9,5))
Indicadores_copy['T_Objetivo'].plot(ax=ax, color='orange', linestyle= '-', linewidth='1.5')
Indicadores_copy['TIIE_28'].plot(ax=ax, color='red', linestyle= '--', linewidth= '1.5')
Indicadores_copy['T_Promedio_CH'].plot(ax=ax, color='cyan', linestyle= '-', linewidth='1.5')
Indicadores_copy['INPC'].plot(ax=ax, color='blue', linestyle= '-', linewidth='1.5')
ax.set_title('Principales Indicadores - Mx.',fontsize= 16, color='blue')
ax.set_xlabel('Periodo', fontsize= 12, color='black')
ax.tick_params(labelsize='medium', width=3)
ax.set_ylabel('Tasa de interés (%)', fontsize= 12, color='black')
ax.legend(loc="upper right", fontsize=7)
# Se pueden graficar los resultados de todas las columnas de la base de datos

Indicadores_Df.head(2)

Inflacion_anual= Indicadores_Df.drop(['T_Objetivo', 'TIIE_28','Promedio', 'T_Promedio_CH'], axis=1)
#Se crea una nueva base de datos - eliminando la columnas que no se utilizan

Inflacion_anual.index

Inflacion_anual = Inflacion_anual.resample('MS').agg('last')
# Se agrupa la información en meses 'MS' utilizando el último valor del mes 'last'

Inflacion_anual

Inflacion_anual['Porcentaje'] = (Inflacion_anual['INPC'] / Inflacion_anual['INPC'].shift(12)-1)*100
# Se crea una nueva columna que obtiene la inflación en términos porcentuales de manera anual -

Inflacion_anual

style.use('ggplot')
plt.plot(Inflacion_anual['Porcentaje'], color="b", linewidth= 1.5)
plt.title('Inflación anual 2009 a 2023 Mx.')
plt.ylabel('Inflación anual (%)')
plt.show()
# Se pueden graficar los resultados

style.use('dark_background')
plt.plot(Inflacion_anual['Porcentaje'], color="red", linewidth= 1.5)
plt.plot(Indicadores_Df['T_Objetivo'], color="blue", linewidth= 1.5, alpha=1)
plt.plot(Indicadores_Df['T_Promedio_CH'], color="orange", linewidth= 1.5, alpha=1)
plt.title('Inflación - Tasa Referencia - Tasa C-H Mx.')
plt.ylabel('Indicadores (%)')
plt.show()
# se puede recuperar la información de los DataFrames creados anteriormente

plt.style.available

style.use('grayscale')
fig_2 = plt.figure(figsize=(10,7))
ax2 = fig_2.subplots(2,2)

Indicadores_Df['T_Objetivo'].plot(ax=ax2[0,0], color="red", linewidth=2.5)
Indicadores_Df['TIIE_28'].plot(ax=ax2[0,1], color="green", linewidth=2.5)
Indicadores_Df['T_Promedio_CH'].plot(ax=ax2[1,0], color="orange", linewidth=2.5)
Inflacion_anual['Porcentaje'].plot(ax=ax2[1,1], color="magenta", linewidth=2.5)

ax2[0,0].legend(fontsize=7, labelcolor='blue')
ax2[0,1].legend(fontsize=7, labelcolor='blue')
ax2[1,0].legend(fontsize=7, labelcolor='blue')
ax2[1,1].legend(fontsize=7, labelcolor='blue')

ax2[0,0].set_xlabel("Periodo", fontsize=8, color='blue')
ax2[0,1].set_xlabel("Periodo", fontsize=8, color='blue')
ax2[1,0].set_xlabel("Periodo", fontsize=8, color='blue')
ax2[1,1].set_xlabel("Periodo", fontsize=8, color='blue')

ax2[0,0].set_ylabel("Tasa (%)", fontsize=8, color='blue')
ax2[0,1].set_ylabel("Tasa (%)", fontsize=8, color='blue')
ax2[1,0].set_ylabel("Tasa (%)", fontsize=8, color='blue')
ax2[1,1].set_ylabel("Tasa (%)", fontsize=8, color='blue')

ax2[0,0].set_title('Tasa de Referencia Banxico', fontsize= 11, color='black')
ax2[0,1].set_title('TIIE 28 días', fontsize= 11, color='black')
ax2[1,0].set_title('Tasa de Interés Crédito a los Hogares  \n (Tasa Promedio)', fontsize= 11, color='black')
ax2[1,1].set_title('Inflación anual', fontsize= 11, color='black')

ax2[0,0].grid(color='gray', linestyle = '-', linewidth=0.5)
ax2[0,1].grid(color='gray', linestyle = '-', linewidth=0.5)
ax2[1,0].grid(color='gray', linestyle = '-', linewidth=0.5)
ax2[1,1].grid(color='gray', linestyle = '-', linewidth=0.5)

plt.suptitle("Layout")
plt.tight_layout()

fig_2.savefig('grafica.jpg')
